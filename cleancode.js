// 什麼是clean code?
// 1.能通過所有的測試。
// 2.沒有重複的程式碼。
// 3.充分表達系統設計個構思。
// 4.具有最少數量的實體（entities），實體包含類別、方法（methods）、函式或其他欸似的實體等等。

// -- 命名 --
// 讓變數不需要註解就能說明他的用處，都是為了可以更方便閱讀程式碼
// 1.具體描述事件
// 2.數量單位
// 類別(class)的命名應該使用名詞或名詞片語而非動詞
// 函式(function)的命名應該使用動詞或動詞片語

// -- 簡短 --
// If、else、while 及其他敘述都應該只有一行，這意味者，函式不應該大到包含巢狀結構。因此，除非有特殊的需求，否則函式裡的縮排程度應該只能包含 1 ~ 2 層。
// 物件導向的程式語言，應該盡量使用物件導向的優點 this 而不是傳遞 reference。
// 讓函式「只做一件事」，這意味著完整的一件事可以包含他完整的工作，但像順路或隨手幫忙的事情則不在裡面，可以嘗試把函式的內容寫成一段話或文章，可以幫助判別在這件「事」裡面他是否做了其他事情。

// -- 註解 --
// 用snake或camel的命名代替註解
// 有益的註解: 1.法律型註解(如Copyright的註解)
//            2.對意圖的註解，如果沒辦法在少量的敘述內完成說明當變數名稱時，改用註解
//            3.docstring, python中可以用來產生文檔，如此在寫註解的同時也把文檔寫好了

// -- 排版 --
// 遵循規則的空格適當的讓該分開的區域分開可以更方便的閱讀，而在垂直排版上作者提到:「一個被呼叫的函式，應該要出現在『執行呼叫的函式』的下方。」

// --